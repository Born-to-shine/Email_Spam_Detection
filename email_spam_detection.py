# -*- coding: utf-8 -*-
"""email_spam_detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Oda1Fsv2pNuFk4k53Mr4otVxld90mPOF

# E-mail Spam Detection
### The task it to classify whether the email is spam or ham(not spam)
### Dataset - spam_ham_dataset
"""

# Import libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score
from sklearn.model_selection import cross_val_score

# Import dataset
dataset = pd.read_csv('spam_ham_dataset.csv')
y = dataset.iloc[:, -1].values

print(y)

len(y)

# Data cleaning the email
import re
import nltk
nltk.download('stopwords')
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
all_stopwords = stopwords.words('english')
all_stopwords.remove('not')
spam_ham_email = []
for i in range(0, len(y)):
  email = re.sub('[^a-zA-Z]', ' ', dataset['text'][i])
  email = email.lower()
  email = email.split()
  ps = PorterStemmer() 
  email = [ps.stem(word) for word in email if not word in set(all_stopwords)]
  email = ' '.join(email)
  spam_ham_email.append(email)
# print(spam_ham_email[0])

# Convert to sparse matrix
from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features = 500)
x = cv.fit_transform(spam_ham_email).toarray()

print(x)

len(y)

# Split the dataset into training test and test set
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.25, random_state = 0)

# Apply models and add the accuracy in the list
accuracy = []

len(x)

# Logistic Regression
from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression(random_state = 0)
classifier.fit(x_train, y_train)
y_pred = classifier.predict(x_test)
print('Logistic Regression: ')
cm = confusion_matrix(y_test, y_pred)
print('Confusion Matrix:\n', cm)
acc = accuracy_score(y_test, y_pred)*100
print('Accuracy Score: ', acc)
accuracy.append(acc)

# k- Nearest Neighbour
from sklearn.neighbors import KNeighborsClassifier
classifier = KNeighborsClassifier(n_neighbors = 5)
classifier.fit(x_train, y_train)
y_pred = classifier.predict(x_test)
print('k-Nearest Neighbor: ')
cm = confusion_matrix(y_test, y_pred)
print('Confusion Matrix:\n', cm)
acc = accuracy_score(y_test, y_pred)*100
print('Accuracy Score: ', acc)
accuracy.append(acc)

# Support Vector Machine
from sklearn.svm import SVC
classifier = SVC(kernel = 'linear', random_state = 0)
classifier.fit(x_train, y_train)
y_pred = classifier.predict(x_test)
print('Support Vector Machine: ')
cm = confusion_matrix(y_test, y_pred)
print('Confusion Matrix:\n', cm)
acc = accuracy_score(y_test, y_pred)*100
print('Accuracy Score: ', acc)
accuracy.append(acc)

# Kernel SVM
from sklearn.svm import SVC
classifier = SVC(kernel = 'rbf', random_state = 0)
classifier.fit(x_train, y_train)
y_pred = classifier.predict(x_test)
print('Kernel SVM: ')
cm = confusion_matrix(y_test, y_pred)
print('Confusion Matrix:\n', cm)
acc = accuracy_score(y_test, y_pred)*100
print('Accuracy Score: ', acc)
accuracy.append(acc)

# Naive Bayes
from sklearn.naive_bayes import GaussianNB
classifier = GaussianNB()
classifier.fit(x_train, y_train)
y_pred = classifier.predict(x_test)
print('Naive Bayes: ')
cm = confusion_matrix(y_test, y_pred)
print('Confusion Matrix:\n', cm)
acc = accuracy_score(y_test, y_pred)*100
print('Accuracy Score: ', acc)
accuracy.append(acc)

# Decision Tree
from sklearn.tree import DecisionTreeClassifier
classifier = DecisionTreeClassifier(criterion = 'entropy', random_state = 0)
classifier.fit(x_train, y_train)
y_pred = classifier.predict(x_test)
print('Decision Tree: ')
cm = confusion_matrix(y_test, y_pred)
print('Confusion Matrix:\n', cm)
acc = accuracy_score(y_test, y_pred)*100
print('Accuracy Score: ', acc)
accuracy.append(acc)

# Random Forest
from sklearn.ensemble import RandomForestClassifier
classifier = RandomForestClassifier(n_estimators = 100,criterion = 'entropy', random_state = 0)
classifier.fit(x_train, y_train)
y_pred = classifier.predict(x_test)
print('Random Forest: ')
cm = confusion_matrix(y_test, y_pred)
print('Confusion Matrix:\n', cm)
acc = accuracy_score(y_test, y_pred)*100
print('Accuracy Score: ', acc)
accuracy.append(acc)

# MultinomialNB
from sklearn.naive_bayes import MultinomialNB
classifier = MultinomialNB()
classifier.fit(x_train, y_train)
y_pred = classifier.predict(x_test)
print('MultinomialNB: ')
cm = confusion_matrix(y_test, y_pred)
print('Confusion Matrix:\n', cm)
acc = accuracy_score(y_test, y_pred)*100
print('Accuracy Score: ', acc)
accuracy.append(acc)

# Find max accuracy and the best model
models = ['Logistic Regression', 'k - Nearest Neighbor', 'Support Vector Machine', 'Kernel SVM', 'Naive Bayes', 'Decision Tree', 'Random Forest', 'MultinomialNB']
max = 0
for i in accuracy:
  if i > max:
    max = i
index = accuracy.index(max)
print(models[index], 'classification is the best classification model to detect whether the email is spam or not. The accuracy of the model is ', max, '%')

# Enter the subject of any email to check whether the email is spam or ham. This uses the MultinomialNB classification algorithm
from sklearn.naive_bayes import MultinomialNB
def predict(email):
  new_spam_ham_email = []
  email = re.sub('[^a-zA-Z]', ' ', email)
  email = email.lower()
  email = email.split()
  ps = PorterStemmer()
  email = [ps.stem(word) for word in email if not word in set(all_stopwords)]
  email = ' '.join(email)
  new_spam_ham_email.append(email)
  new_X_test = cv.transform(new_spam_ham_email).toarray()
  classifier = MultinomialNB()
  classifier.fit(x_train, y_train) 
  new_y_pred = classifier.predict(new_X_test)
  if new_y_pred == 1:
    print('The email is spam.')
  else:
    print('The email is not spam i.e ham.')

# Enter the email
email_text = 'Hello everyone'
predict(email_text)
email_text = 'The 5 Classification Evaluation metrics every Data Scientist must know'
predict(email_text)
email_text = 'Progate is one of the top most Japanese Company (1,700,000 users active in 100+ countries) . It is an easy-to-use platform designed to help you learn coding online.'
predict(email_text)
email_text = 'Progate give limited time special free offer for Java developer certificate.'
predict(email_text)